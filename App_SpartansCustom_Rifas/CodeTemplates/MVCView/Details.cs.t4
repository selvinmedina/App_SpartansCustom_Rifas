<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>
<!-- VISTA PARCIAL -->
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmDetalle<#= (ViewDataTypeShortName).Substring(2, (int)(ViewDataTypeShortName.Length) - 2) #>" }))
{
    <div class="modal-body">
        @Html.AntiForgeryToken()
<#
        foreach (PropertyMetadata property in ModelMetadata.Properties) {
            if (property.IsPrimaryKey)
            {
#>
        <div class="form-group">
            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
        </div>
<#
                continue;
            }
            string PropertyThisName = (string)GetValueExpression(property);
            if (property.Scaffold && !PropertyThisName.Contains("Crea") && !PropertyThisName.Contains("Modifica") && !PropertyThisName.Contains("tb"))
            {
                if (property.IsReadOnly)
                {
                    continue;
                }

                if (property.IsForeignKey)
                {
#>
        <div class="form-group">
            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
        </div>
<#
                continue;
                }

                if (IsCheckbox(property))
                {
#>
        <div class="form-group">
            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
        </div>
<#
                }
                else if (IsDate(property))
                {
#>
        <div class="form-group">
            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
        </div>
<#
                }
                else if (IsNumericType(property))
                {
#>
        <div class="form-group">
            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
        </div>
<#
                }
                else if (IsSelect(property))
                {
#>
        <div class="form-group">
            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
        </div>
<#
                }
                else
                {
#>
        <div class="form-group">
            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
        </div>
<#
                }
            }
        }
#>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card m-b-20">
                        <div class="card-body">
                            <h4 class="mt-0 header-title">Auditoría</h4>
                            <div class="table-responsive">
                                <table class="table table-striped table-bordered dataTable">
                                    <thead>
                                        <tr>
                                            <th>Acción</th>
                                            <th>Usuario</th>
                                            <th>Fecha</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Creado</td>
                                            <td><span id="UsuarioCrea"> </span></td>
                                            <td><span id="FechaCrea"> </span></td>
                                        </tr>
                                        <tr>
                                            <td>Modificado</td>
                                            <td><span id="UsuarioModifica"> </span></td>
                                            <td><span id="FechaModifica"> </span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="submit" class="btn btn-primary waves-effect waves-light">Guardar</button>
        <button type="button" class="btn btn-danger waves-effect waves-light" data-dismiss="modal">Cerrar</button>
    </div>
}


<#
}
else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
    if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<#
}
else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
  <head>
      <meta name="viewport" content="width=device-width" />
      <title><#= ViewName #></title>
  </head>
  <body>

<#
    PushIndent("    ");
}
#>
<!-- VISTA NORMAL -->
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="card m-b-20">
                <div class="card-body">
                    @Html.ActionLink("Regresar", "Index", null, new { @class="btn btn-primary btn-sm waves-effect waves-light pull-right" })
                    <h3><#= ViewName#></h3>
                </div>
               @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmDetalle<#= (ViewDataTypeShortName).Substring(2, (int)(ViewDataTypeShortName.Length) - 2) #>" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
<#
            foreach (PropertyMetadata property in ModelMetadata.Properties) {
                if (property.IsPrimaryKey)
                {
#>
                        <div class="form-group">
                            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
                            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
                        </div>
<#
                    continue;
                }
                string PropertyThisName = (string)GetValueExpression(property);
                if (property.Scaffold && !PropertyThisName.Contains("Crea") && !PropertyThisName.Contains("Modifica") && !PropertyThisName.Contains("tb"))
                {
                    if (property.IsReadOnly)
                    {
                        continue;
                    }

                    if (property.IsForeignKey)
                    {
#>
                        <div class="form-group">
                            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
                            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
                        </div>
<#
                        continue;
                    }
                    if (IsCheckbox(property))
                    {
#>
                        <div class="form-group">
                            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
                            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
                        </div>
<#
                    }
                    else if (IsDate(property))
                    {
#>
                        <div class="form-group">
                            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
                            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
                        </div>
<#
                    }
                    else if (IsNumericType(property))
                    {
#>
                        <div class="form-group">
                            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
                            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
                        </div>
<#
                    }
                    else if (IsSelect(property))
                    {
#>
                        <div class="form-group">
                            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
                            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
                        </div>
<#
                    }
                    else
                    {
#>
                        <div class="form-group">
                            @Html.LabelFor(model => model.<#= property.PropertyName #>, new { @class = "control-label", @disabled = "disabled" })
                            @Html.EditorFor(model => model.<#= property.PropertyName #>, new { @class = "form-control", @disabled = "disabled" })
                        </div>
<#
                    }
                }
            }
#>
                    </div>
                    <div class="form-horizontal">
                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-12">
                                    <div class="card m-b-20">
                                        <div class="card-body">
                                            <h4 class="mt-0 header-title">Auditoría</h4>
                                            <div class="table-responsive">
                                                <table class="table table-striped table-bordered dataTable">
                                                    <thead>
                                                        <tr>
                                                            <th>Acción</th>
                                                            <th>Usuario</th>
                                                            <th>Fecha</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td>Creado</td>
                                                            <td><span id="UsuarioCrea"> </span></td>
                                                            <td><span id="FechaCrea"> </span></td>
                                                        </tr>
                                                        <tr>
                                                            <td>Modificado</td>
                                                            <td><span id="UsuarioModifica"> </span></td>
                                                            <td><span id="FechaModifica"> </span></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                @Html.ActionLink("Cancelar", "Index", null, new { @class="btn btn-danger waves-effect waves-light"})
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
  </body>
</html>
<#
}
#>

<#
    bool IsNumericType(PropertyMetadata property)
        {
            var types = new [] {
                "System.Byte",
                "System.SByte",
                "System.UInt16",
                "System.UInt32",
                "System.UInt64",
                "System.Int16",
                "System.Int32",
                "System.Int64",
                "System.Decimal",
                "System.Double",
                "System.Single"
            };

            return types.Any(property.TypeName.Contains);
        }

    bool IsCheckbox(PropertyMetadata p) => p.TypeName.Contains("System.Boolean");
    bool IsSelect(PropertyMetadata p) => p.IsEnum && !p.IsEnumFlags;
    bool IsDate(PropertyMetadata p) => p.TypeName.Contains("System.DateTime");
#>

<script>
    $(document).ready(function(){
        //INICIALIZAR LA ESCUCHA DE VALIDACIONES DENTRO DEL FORMULARIO
        $('form').parsley();

        // INICIALIZAR EL PLUGIN DE SELECT2
        $(".select2").select2(
            {
                dropdownParent: $('#FormCrear'),
                placeholder: 'Seleccione un empleado',
                language: {
                    noResults: function () {
                        return 'Resultados no encontrados.';
                    },
                    searching: function () {
                        return 'Buscando...';
                    }
                }
            }
        );

        //INICIALIZAR EL ESTILO DE LOS BOTONES PARA LOS CAMPOS DE TIPO NUMBER
        $('.demo0').TouchSpin({
            buttondown_class: 'btn btn-primary',
            buttonup_class: 'btn btn-primary'
        });

        //INICIALIZAR EL DATEPICKER
        jQuery('.datepicker-autoclose').datepicker({
            autoclose: true,
            todayHighlight: true
        });
    });
</script>

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
